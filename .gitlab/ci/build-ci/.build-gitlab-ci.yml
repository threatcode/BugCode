generate_deb_dev:
    image: registry.gitlab.com/bugcode/devops
    stage: build
    before_script:
        - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/khulnasoft/bugcode-linux-installers-builder.git
        - cd bugcode-linux-installers-builder
        - "if ! [ -z $INSTALLER_BRANCH ]; then git checkout $INSTALLER_BRANCH; fi"
        - cd ..
        - mv py3.tar /
        - cd /; tar xf py3.tar; cd -

    script:
        - mkdir build_installer
        - cp -a bugcode.tar.gz build_installer/.
        - cd build_installer
        - /bin/tar zxf bugcode.tar.gz
        - cd bugcode_copy
        - cp -r /nix .
        - mv ../../bugcode-linux-installers-builder .
        - cd bugcode-linux-installers-builder
        - git rev-parse HEAD
        - git clone https://github.com/jordansissel/fpm.git
        - cd fpm
        - git checkout d7b466787d17581bc723e474ecf6e18f48226031
        - git apply ../fpm-patchs/fpm.virtualenv.patch
        - make gem
        - gem install --no-document dotenv -v 2.7
        - gem install --no-document public_suffix -v 4.0.7
        - gem install --no-document fpm-1.11.0.gem
        - cd ../../
        - POSTFIX=$(echo "$CI_COMMIT_BRANCH" | awk '{split($1,a,"_");split($1,b,"/"); if (a[3]!="y2k") if (b[2]=="dev"||b[2]=="master") print ""; else print "~"a[3]; else exit 1;}')
        - sh bugcode-linux-installers-builder/build.sh $(eval $IMAGE_TAG)~$((`date '+%s%N'`/1000))$POSTFIX server deb white
        - mv bugcode-server_amd64.deb ../../bugcode-server_amd64.deb
    needs:
      - job: generate_build_file_dev
        artifacts: true
      - job: build_nix_python3_dev
        artifacts: true
    artifacts:
        name: 'bugcode_$CI_COMMIT_REF_NAME.deb'
        paths:
            - "bugcode-server_amd64.deb"
        expire_in: 15 days
    rules:
        - !reference [.be-uploaded, rules]
        # What is not '/staging' is '/dev', '/master' or a development branch , and all are manual
        - !reference [.ignore-on-staging, rules]
        - !reference [.ignore-on-master, rules]
        - when: never

generate_deb_staging:
    image: registry.gitlab.com/bugcode/devops
    stage: build
    before_script:
        - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/khulnasoft/bugcode-linux-installers-builder.git
        - cd bugcode-linux-installers-builder
        - "if ! [ -z $INSTALLER_BRANCH ]; then git checkout $INSTALLER_BRANCH; fi"
        - cd ..
        - mv py3.tar /
        - cd /; tar xf py3.tar; cd -

    script:
        - mkdir build_installer
        - cp -a bugcode.tar.gz build_installer/.
        - cd build_installer
        - /bin/tar zxf bugcode.tar.gz
        - cd bugcode_copy
        - cp -r /nix .
        - mv ../../bugcode-linux-installers-builder .
        - cd bugcode-linux-installers-builder
        - git rev-parse HEAD
        - git clone https://github.com/jordansissel/fpm.git
        - cd fpm
        - git checkout d7b466787d17581bc723e474ecf6e18f48226031
        - git apply ../fpm-patchs/fpm.virtualenv.patch
        - make gem
        - gem install --no-document dotenv -v 2.7
        - gem install --no-document public_suffix -v 4.0.7
        - gem install --no-document fpm-1.11.0.gem
        - cd ../../
        - POSTFIX=$(echo "$CI_COMMIT_BRANCH" | awk '{split($1,a,"_");split($1,b,"/"); if (a[3]!="y2k") if (b[2]=="dev"||b[2]=="master") print ""; else print "~"a[3]; else exit 1;}')
        - sh bugcode-linux-installers-builder/build.sh $(eval $IMAGE_TAG)~$((`date '+%s%N'`/1000))$POSTFIX server deb white
        - mv bugcode-server_amd64.deb ../../bugcode-server_amd64.deb
    needs:
      - job: generate_build_file_staging
        artifacts: true
      - job: build_nix_python3_staging
        artifacts: true
    artifacts:
        name: 'bugcode_$CI_COMMIT_REF_NAME.deb'
        paths:
            - "bugcode-server_amd64.deb"
        expire_in: 15 days
    rules:
        - !reference [.on-staging, rules]
        - when: never

generate_deb_master:
    image: registry.gitlab.com/bugcode/devops
    stage: build
    before_script:
        - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/khulnasoft/bugcode-linux-installers-builder.git
        - cd bugcode-linux-installers-builder
        - "if ! [ -z $INSTALLER_BRANCH ]; then git checkout $INSTALLER_BRANCH; fi"
        - cd ..
        - mv py3.tar /
        - cd /; tar xf py3.tar; cd -

    script:
        - mkdir build_installer
        - cp -a bugcode.tar.gz build_installer/.
        - cd build_installer
        - /bin/tar zxf bugcode.tar.gz
        - cd bugcode_copy
        - cp -r /nix .
        - mv ../../bugcode-linux-installers-builder .
        - cd bugcode-linux-installers-builder
        - git rev-parse HEAD
        - git clone https://github.com/jordansissel/fpm.git
        - cd fpm
        - git checkout d7b466787d17581bc723e474ecf6e18f48226031
        - git apply ../fpm-patchs/fpm.virtualenv.patch
        - make gem
        - gem install --no-document dotenv -v 2.7
        - gem install --no-document public_suffix -v 4.0.7
        - gem install --no-document fpm-1.11.0.gem
        - cd ../../
        - POSTFIX=$(echo "$CI_COMMIT_BRANCH" | awk '{split($1,a,"_");split($1,b,"/"); if (a[3]!="y2k") if (b[2]=="dev"||b[2]=="master") print ""; else print "~"a[3]; else exit 1;}')
        - sh bugcode-linux-installers-builder/build.sh $(eval $IMAGE_TAG)~$((`date '+%s%N'`/1000))$POSTFIX server deb white
        - mv bugcode-server_amd64.deb ../../bugcode-server_amd64.deb
    needs:
      - job: generate_build_file_master
        artifacts: true
      - job: build_nix_python3_master
        artifacts: true
    artifacts:
        name: 'bugcode_$CI_COMMIT_REF_NAME.deb'
        paths:
            - "bugcode-server_amd64.deb"
        expire_in: 15 days
    rules:
        - !reference [.on-master, rules]
        - !reference [.on-community-tag, rules]
        - when: never

generate_rpm_dev:
    stage: build
    image: centos:7
    before_script:
      - yum -y upgrade
      - yum -y install which git epel-release centos-release-scl
      - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/khulnasoft/bugcode-linux-installers-builder.git
      - cd bugcode-linux-installers-builder
      - "if ! [ -z $INSTALLER_BRANCH ]; then git checkout $INSTALLER_BRANCH; fi"
      - cd ..
      - mv py3.tar /
      - cd /; tar xf py3.tar; cd -
      - yum -y install curl zsh mailcap libffi-devel openssl-devel openldap-devel libjpeg-devel postgresql-devel
      - yum groups -y install "Development Tools"
      - yum -y install rh-python36 rh-ruby26 rh-ruby26-ruby-devel
      - source /opt/rh/rh-ruby26/enable
      - export X_SCLS="`scl enable rh-ruby26 'echo $X_SCLS'`"
      - source /opt/rh/rh-python36/enable
      - pip install virtualenv
      - pip install virtualenv-tools3
    script:
        - mkdir build_installer
        - cp -a bugcode.tar.gz build_installer/.
        - cd build_installer
        - /bin/tar zxf bugcode.tar.gz
        - cd bugcode_copy
        - cp -r /nix .
        - mv ../../bugcode-linux-installers-builder .
        - cd bugcode-linux-installers-builder
        - git rev-parse HEAD
        - git clone https://github.com/jordansissel/fpm.git
        - cd fpm
        - git checkout d7b466787d17581bc723e474ecf6e18f48226031
        - git apply ../fpm-patchs/fpm.virtualenv.patch
        - make gem
        - gem install --no-document dotenv -v 2.7
        - gem install --no-document public_suffix -v 4.0.7
        - gem install --no-document fpm-1.11.0.gem
        - cd ../../
        - sh bugcode-linux-installers-builder/build.sh $(eval $IMAGE_TAG) server rpm white
        - mv bugcode-server_amd64.rpm ../../bugcode-server_amd64.rpm
    needs:
      - job: generate_build_file_dev
        artifacts: true
      - job: build_nix_python3_dev
        artifacts: true
    artifacts:
        name: 'bugcode_$CI_COMMIT_REF_NAME.rpm'
        paths:
            - "bugcode-server_amd64.rpm"
        expire_in: 15 days
    rules:
        - !reference [.be-uploaded, rules]
        # What is not '/staging' is '/dev', '/master' or a development branch , and all are manual
        - !reference [.ignore-on-staging, rules]
        - !reference [.ignore-on-master, rules]
        - when: never

generate_rpm_staging:
    stage: build
    image: centos:7
    before_script:
      - yum -y upgrade
      - yum -y install which git epel-release centos-release-scl
      - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/khulnasoft/bugcode-linux-installers-builder.git
      - cd bugcode-linux-installers-builder
      - "if ! [ -z $INSTALLER_BRANCH ]; then git checkout $INSTALLER_BRANCH; fi"
      - cd ..
      - mv py3.tar /
      - cd /; tar xf py3.tar; cd -
      - yum -y install curl zsh mailcap libffi-devel openssl-devel openldap-devel libjpeg-devel postgresql-devel
      - yum groups -y install "Development Tools"
      - yum -y install rh-python36 rh-ruby26 rh-ruby26-ruby-devel
      - source /opt/rh/rh-ruby26/enable
      - export X_SCLS="`scl enable rh-ruby26 'echo $X_SCLS'`"
      - source /opt/rh/rh-python36/enable
      - pip install virtualenv
      - pip install virtualenv-tools3
    script:
        - mkdir build_installer
        - cp -a bugcode.tar.gz build_installer/.
        - cd build_installer
        - /bin/tar zxf bugcode.tar.gz
        - cd bugcode_copy
        - cp -r /nix .
        - mv ../../bugcode-linux-installers-builder .
        - cd bugcode-linux-installers-builder
        - git rev-parse HEAD
        - git clone https://github.com/jordansissel/fpm.git
        - cd fpm
        - git checkout d7b466787d17581bc723e474ecf6e18f48226031
        - git apply ../fpm-patchs/fpm.virtualenv.patch
        - make gem
        - gem install --no-document dotenv -v 2.7
        - gem install --no-document public_suffix -v 4.0.7
        - gem install --no-document fpm-1.11.0.gem
        - cd ../../
        - sh bugcode-linux-installers-builder/build.sh $(eval $IMAGE_TAG) server rpm white
        - mv bugcode-server_amd64.rpm ../../bugcode-server_amd64.rpm
    needs:
      - job: generate_build_file_staging
        artifacts: true
      - job: build_nix_python3_staging
        artifacts: true
    artifacts:
        name: 'bugcode_$CI_COMMIT_REF_NAME.rpm'
        paths:
            - "bugcode-server_amd64.rpm"
        expire_in: 15 days
    rules:
        - !reference [.on-staging, rules]
        - when: never

generate_rpm_master:
    stage: build
    image: centos:7
    before_script:
      - yum -y upgrade
      - yum -y install which git epel-release centos-release-scl
      - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/khulnasoft/bugcode-linux-installers-builder.git
      - cd bugcode-linux-installers-builder
      - "if ! [ -z $INSTALLER_BRANCH ]; then git checkout $INSTALLER_BRANCH; fi"
      - cd ..
      - mv py3.tar /
      - cd /; tar xf py3.tar; cd -
      - yum -y install curl zsh mailcap libffi-devel openssl-devel openldap-devel libjpeg-devel postgresql-devel
      - yum groups -y install "Development Tools"
      - yum -y install rh-python36 rh-ruby26 rh-ruby26-ruby-devel
      - source /opt/rh/rh-ruby26/enable
      - export X_SCLS="`scl enable rh-ruby26 'echo $X_SCLS'`"
      - source /opt/rh/rh-python36/enable
      - pip install virtualenv
      - pip install virtualenv-tools3
    script:
        - mkdir build_installer
        - cp -a bugcode.tar.gz build_installer/.
        - cd build_installer
        - /bin/tar zxf bugcode.tar.gz
        - cd bugcode_copy
        - cp -r /nix .
        - mv ../../bugcode-linux-installers-builder .
        - cd bugcode-linux-installers-builder
        - git rev-parse HEAD
        - git clone https://github.com/jordansissel/fpm.git
        - cd fpm
        - git checkout d7b466787d17581bc723e474ecf6e18f48226031
        - git apply ../fpm-patchs/fpm.virtualenv.patch
        - make gem
        - gem install --no-document dotenv -v 2.7
        - gem install --no-document public_suffix -v 4.0.7
        - gem install --no-document fpm-1.11.0.gem
        - cd ../../
        - sh bugcode-linux-installers-builder/build.sh $(eval $IMAGE_TAG) server rpm white
        - mv bugcode-server_amd64.rpm ../../bugcode-server_amd64.rpm
    needs:
      - job: generate_build_file_master
        artifacts: true
      - job: build_nix_python3_master
        artifacts: true
    artifacts:
        name: 'bugcode_$CI_COMMIT_REF_NAME.rpm'
        paths:
            - "bugcode-server_amd64.rpm"
        expire_in: 15 days
    rules:
        - !reference [.on-master, rules]
        - !reference [.on-community-tag, rules]
        - when: never

generate_docker_tar_gz_dev:
    stage: build
    tags:
      - shell
    script:
        - !reference [ .get_from_tar_and_replace_www, script ]
        - !reference [ .get_secrets, script ]
        - docker build . -t threatcode.github.io/bugcodemunity
        - docker save threatcode.github.io/bugcodemunity:latest | gzip > bugcode-server-docker.tar.gz
        - docker rmi -f threatcode.github.io/bugcodemunity
    artifacts:
      paths:
        - bugcode-server-docker.tar.gz
    rules:
        - !reference [.be-uploaded, rules]
        # What is not '/staging' is '/dev', '/master' or a development branch , and all are manual
        - !reference [.ignore-on-staging, rules]
        - !reference [.ignore-on-master, rules]
        - when: never
    needs:
        - project: khulnasoft/bugcode-react
          job: npm_build
          ref: community/dev
          artifacts: true

generate_docker_tar_gz_staging:
    stage: build
    tags:
      - shell
    script:
        - !reference [ .get_from_tar_and_replace_www, script ]
        - !reference [ .get_secrets, script ]
        - docker build . -t threatcode.github.io/bugcodemunity
        - docker save threatcode.github.io/bugcodemunity:latest | gzip > bugcode-server-docker.tar.gz
        - docker rmi -f threatcode.github.io/bugcodemunity
    artifacts:
      paths:
        - bugcode-server-docker.tar.gz
    rules:
        - !reference [.on-staging, rules]
        - when: never
    needs:
        - project: khulnasoft/bugcode-react
          job: npm_build
          ref: community/staging
          artifacts: true

generate_docker_tar_gz_master:
    stage: build
    tags:
      - shell
    script:
        - !reference [ .get_from_tar_and_replace_www, script ]
        - !reference [ .get_secrets, script ]
        - docker build . -t $CI_REGISTRY_IMAGE
        - docker save $CI_REGISTRY_IMAGE:latest | gzip > bugcode-server-docker.tar.gz
        - docker rmi -f $CI_REGISTRY_IMAGE
    artifacts:
      paths:
        - bugcode-server-docker.tar.gz
    rules:
      - !reference [.on-master, rules]
      - !reference [ .on-community-tag, rules ]
      - !reference [ .update_docker, rules ]
      - when: never
    needs:
      - project: khulnasoft/bugcode-react
        job: npm_build
        ref: community/master
        artifacts: true
